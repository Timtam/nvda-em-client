def getAllParents(f):
    result= []
    while f is not None:
        result.append(f)
        f = f.parent
    return result
    
    
5 children:
len(focus.parent.parent.parent.parent.parent.parent.children)
p1 = focus.parent.parent.parent.parent.parent.parent
p1c = focus.parent.parent.parent.parent.parent
[controlTypes.roleLabels[c.role] for c in p1.children]

print("\n".join([f"{tryGetIndex(p)} {p.name} {controlTypes.roleLabels[p.role]}" for p in getAllParents(focus)]))
def tryGetIndex(f):
        index = 0
        while f.previous is not None:
            f = f.previous
            index += 1
        i2 = 0
        while f.next is not None:
            i2 += 1
            f = f.next
        return f"{index}/{i2}"
        
def findByRole(elem, role):
    result = []    
    if elem.role == role:
        result.append(elem)
        return result
    for child in elem.children:
        result.extend(findByRole(child, role))
    return result
api.copyToClip("\n".join(printTree(dd, level=9)))
def printTree(obj, level=10, indent=0):
    result = []
    indentStr = " "*indent
    if level < 0:
        return [f"{indentStr}..."]
    try:
        desc = f"{indentStr}{controlTypes.roleLabels[obj.role]} {obj.name}"
    except:
        desc = str(type(obj))
    result.append(desc)
    ni = indent+4
    li = level-1
    try:
        children = obj.children
    except:
        children = []
    for child in children:
        result.extend(printTree(child, li, ni))
    return result
        
def readPreviewPane(obj):
    result = ""
    obj = obj.firstChild
    while obj:
        if obj.firstChild:
            result += " " + readPreviewPane(obj)
        elif obj.name:
            result += " " + obj.name
        obj = obj.next
    return result
        