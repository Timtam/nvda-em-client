f = focus
t = []
while f is not None:
    t.append(controlTypes.roleLabels[f.role])
    f = f.parent

def findRecursively(root, condition):
    result = []
    siblings = [root]
    while len(siblings) > 0:
        nextSiblings = []
        for c in siblings:
            if condition(c):
                result.append (c)
            nextSiblings.extend(c.children)
        if len(result) > 0:
            return result
        siblings = nextSiblings
    return []

def findMailView(focus=None):
    if not focus:
        focus = api.getFocusObject()
    window = getWindow(focus)
    #window = api.getForegroundObject()
    # For some reason .firstChild returns a different result compared to children[0]
    #mailView = window.children[0]
    mailView = window.firstChild.firstChild
    if mailView.name != "Mail view":
        raise Exception(f"Cannot find mail view!\n{printTree2(window)}")
    return
def findDocument(focus=None):
    mw = findMailView(focus)
    try:
        document = mw.firstChild.next.firstChild.firstChild.firstChild.firstChild
        if document.role != controlTypes.ROLE_DOCUMENT:
            raise IndexError()
    except IndexError as e:
        raise Exception(f"Couldn't find document; debug MailView: {printTree2(mw)}", e)
    except AttributeError as e:
        raise Exception(f"Couldn't find document; debug MailView: {printTree2(mw)}", e)
    return document

def findSubDocument(focus=None):
    d = findDocument(focus)
    def failWithDebugInfo(s):
        raise Exception(f"Couldn't find subdocument; {s}; debug:: {printTree2(d)}", e)
    obj = d
    for i in range(10):
        obj = obj.lastChild
        if obj is None:
            failWithDebugInfo()
        if obj.role == controlTypes.ROLE_DOCUMENT:
            return obj
    failWithDebugInfo()
logEvents = False
if False:
    # Do some event debugging!
    originalShouldAcceptEvent = eventHandler.shouldAcceptEvent
    def shouldAcceptEvent(eventName, windowHandle=None):
        if logEvents:
            mylog(f"sae({eventName}, {windowHandle})")
        return originalShouldAcceptEvent(eventName, windowHandle)
    eventHandler.shouldAcceptEvent = shouldAcceptEvent
    tones.beep(500, 500)


    """
    @script(description='Test next column', gestures=['kb:Control+Alt+RightArrow'])
    def script_nextColumn(self, gesture):
        tones.beep(500,50)
    @script(description='Test previous column', gestures=['kb:Control+Alt+LeftArrow'])
    def script_previousColumn(self, gesture):
        tones.beep(500,50)
    """


    """
    @script(description='Test next column', gestures=['kb:Control+Alt+RightArrow'])
    def script_nextColumn(self, gesture):
        import time
        time.sleep(3)
        tones.beep(500,50)
    @script(description='Test previous column', gestures=['kb:Control+Alt+LeftArrow'])
    def script_previousColumn(self, gesture):
        tones.beep(500,50)

    @script(description='Test down', gestures=['kb:Control+Alt+DownArrow'])
    def script_downArrow(self, gesture):
        tones.beep(500,50)
    @script(description='Test alternative', gestures=['kb:Control+Windows+RightArrow'])
    def script_test1(self, gesture):
        tones.beep(500,50)
    @script(description='Test alternative', gestures=['kb:Alt+Windows+RightArrow'])
    def script_test2(self, gesture):
        tones.beep(500,50)
    @script(description='Test alternative', gestures=['kb:Control+Alt+Windows+RightArrow'])
    def script_test3(self, gesture):
        tones.beep(500,50)
    """

if False:
    from NVDAObjects import behaviors
    def myFunc(selfself, gesture):
        tones.beep(500, 500)
        gesture.send()
    behaviors.RowWithFakeNavigation.script_moveToNextColumn = myFunc
    tones.beep(500, 500)
